"use client";
import "./globals.css";
import type { Metadata } from "next";
import { cls } from "../libs/utils";
import { useRouter } from "next/navigation";
import BottomTabBar from "@/components/bottom-tap";
import { useEffect, useState } from "react";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface RootLayout {
  main?: boolean;
  children: React.ReactNode;
  title?: string;
  canGoBack?: boolean;
  hasTabBar?: boolean;
}

export default function RootLayout({
  main,
  children,
  title,
  canGoBack,
  hasTabBar,
}: RootLayout) {
  const router = useRouter();
  const [titles, setTitles] = useState("");
  useEffect(() => setTitles(title as any), []);
  return (
    <html>
      <body className="w-full max-w-xl mx-auto pt-[80px] pb-[70px]">
        {!main && titles ? (
          //조건에 !main만 있을 경우 !main조건에 일치하는 모든페이지에 무조건 nav가 렌더링 되기 때문에 nav가 hydration 과정을 거쳐서 두번 렌더링 되게된다. 따라서 useEffect에 걸어놓은 title이 존재할때만 렌더링되게 조건을 걸어줌.
          <nav
            className={cls(
              "bg-white text-lg font-medium py-4 fixed text-gray-700 border-b border-l border-r top-0 flex items-center w-full max-w-xl mx-auto px-6",
              !canGoBack ? "justify-center" : ""
            )}
          >
            {titles ? titles : null}
            {canGoBack ? (
              <button onClick={() => router.back()}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M15.75 19.5L8.25 12l7.5-7.5"
                  />
                </svg>
              </button>
            ) : null}
          </nav>
        ) : null}
        {children}
        {hasTabBar ? <BottomTabBar /> : null}
      </body>
    </html>
  );
}
